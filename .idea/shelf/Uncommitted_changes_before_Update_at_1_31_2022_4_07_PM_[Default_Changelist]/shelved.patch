Index: FtcRobotController/src/main/java/org/firstinspires/ftc/robotcontroller/external/samples/BasicOpMode_Iterative.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Copyright (c) 2017 FIRST. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted (subject to the limitations in the disclaimer below) provided that\r\n * the following conditions are met:\r\n *\r\n * Redistributions of source code must retain the above copyright notice, this list\r\n * of conditions and the following disclaimer.\r\n *\r\n * Redistributions in binary form must reproduce the above copyright notice, this\r\n * list of conditions and the following disclaimer in the documentation and/or\r\n * other materials provided with the distribution.\r\n *\r\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\r\n * promote products derived from this software without specific prior written permission.\r\n *\r\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\r\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\r\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\r\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\npackage org.firstinspires.ftc.robotcontroller.external.samples;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.Disabled;\r\nimport com.qualcomm.robotcore.eventloop.opmode.OpMode;\r\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\nimport com.qualcomm.robotcore.util.Range;\r\n\r\n/**\r\n * This file contains an example of an iterative (Non-Linear) \"OpMode\".\r\n * An OpMode is a 'program' that runs in either the autonomous or the teleop period of an FTC match.\r\n * The names of OpModes appear on the menu of the FTC Driver Station.\r\n * When an selection is made from the menu, the corresponding OpMode\r\n * class is instantiated on the Robot Controller and executed.\r\n *\r\n * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot\r\n * It includes all the skeletal structure that all iterative OpModes contain.\r\n *\r\n * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.\r\n * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list\r\n */\r\n\r\n@TeleOp(name=\"Basic: Iterative OpMode\", group=\"Iterative Opmode\")\r\n@Disabled\r\npublic class BasicOpMode_Iterative extends OpMode\r\n{\r\n    // Declare OpMode members.\r\n    private ElapsedTime runtime = new ElapsedTime();\r\n    private DcMotor leftDrive = null;\r\n    private DcMotor rightDrive = null;\r\n\r\n    /*\r\n     * Code to run ONCE when the driver hits INIT\r\n     */\r\n    @Override\r\n    public void init() {\r\n        telemetry.addData(\"Status\", \"Initialized\");\r\n\r\n        // Initialize the hardware variables. Note that the strings used here as parameters\r\n        // to 'get' must correspond to the names assigned during the robot configuration\r\n        // step (using the FTC Robot Controller app on the phone).\r\n        leftDrive  = hardwareMap.get(DcMotor.class, \"left_drive\");\r\n        rightDrive = hardwareMap.get(DcMotor.class, \"right_drive\");\r\n\r\n        // Most robots need the motor on one side to be reversed to drive forward\r\n        // Reverse the motor that runs backwards when connected directly to the battery\r\n        leftDrive.setDirection(DcMotor.Direction.FORWARD);\r\n        rightDrive.setDirection(DcMotor.Direction.REVERSE);\r\n\r\n        // Tell the driver that initialization is complete.\r\n        telemetry.addData(\"Status\", \"Initialized\");\r\n    }\r\n\r\n    /*\r\n     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY\r\n     */\r\n    @Override\r\n    public void init_loop() { l\r\n    }\r\n\r\n    /*\r\n     * Code to run ONCE when the driver hits PLAY\r\n     */\r\n    @Override\r\n    public void start() {\r\n        runtime.reset();\r\n    }\r\n\r\n    /*\r\n     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP\r\n     */\r\n    @Override\r\n    public void loop() {\r\n        // Setup a variable for each drive wheel to save power level for telemetry\r\n        double leftPower;\r\n        double rightPower;\r\n\r\n        // Choose to drive using either Tank Mode, or POV Mode\r\n        // Comment out the method that's not used.  The default below is POV.\r\n\r\n        // POV Mode uses left stick to go forward, and right stick to turn.\r\n        // - This uses basic math to combine motions and is easier to drive straight.\r\n        double drive = -gamepad1.left_stick_y;\r\n        double turn  =  gamepad1.right_stick_x;\r\n        leftPower    = Range.clip(drive + turn, -1.0, 1.0) ;\r\n        rightPower   = Range.clip(drive - turn, -1.0, 1.0) ;\r\n\r\n        // Tank Mode uses one stick to control each wheel.\r\n        // - This requires no math, but it is hard to drive forward slowly and keep straight.\r\n        // leftPower  = -gamepad1.left_stick_y ;\r\n        // rightPower = -gamepad1.right_stick_y ;\r\n\r\n        // Send calculated power to wheels\r\n        leftDrive.setPower(leftPower);\r\n        rightDrive.setPower(rightPower);\r\n\r\n        // Show the elapsed game time and wheel power.\r\n        telemetry.addData(\"Status\", \"Run Time: \" + runtime.toString());\r\n        telemetry.addData(\"Motors\", \"left (%.2f), right (%.2f)\", leftPower, rightPower);\r\n    }\r\n\r\n    /*\r\n     * Code to run ONCE after the driver hits STOP\r\n     */\r\n    @Override\r\n    public void stop() {\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/FtcRobotController/src/main/java/org/firstinspires/ftc/robotcontroller/external/samples/BasicOpMode_Iterative.java b/FtcRobotController/src/main/java/org/firstinspires/ftc/robotcontroller/external/samples/BasicOpMode_Iterative.java
--- a/FtcRobotController/src/main/java/org/firstinspires/ftc/robotcontroller/external/samples/BasicOpMode_Iterative.java	(revision 32d38fdeac6e882425fff7c7ba6084aed87228d1)
+++ b/FtcRobotController/src/main/java/org/firstinspires/ftc/robotcontroller/external/samples/BasicOpMode_Iterative.java	(date 1642877187544)
@@ -85,7 +85,7 @@
      * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
      */
     @Override
-    public void init_loop() { l
+    public void init_loop() {
     }
 
     /*
